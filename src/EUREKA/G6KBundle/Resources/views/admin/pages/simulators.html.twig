{#
The MIT License (MIT)

Copyright (c) 2015 Jacques Archimède

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
#}

{% extends "EUREKAG6KBundle:admin/layout:pagelayout.html.twig" %}

{% block content %}
<h2>{{ 'Simulators definition'|trans }}</h2>
{% if simulator is not empty %}
<button class="btn btn-warning update-button save-simulator">{{ 'Save'|trans }} <span class="glyphicon glyphicon-save"></span></button>
{% endif %}
<div class="navbar-default navbar-side" role="navigation">
	<div class="sidebar-collapse">
		<div id="simulators" class="nav panel panel-primary">
			<div class="panel-heading"><h3>{{ 'Simulators'|trans }}</h3></div>
			<div class="panel-body">
				<div>
					<form action="{{ path('eureka_g6k_admin_simulator_crud', {'simulator': 'new', 'crud': 'create'}) }}">
					<button id="btnAddNewSimulator" class="btn btn-default pull-right">{{ 'Create simulator'|trans }} <span class="glyphicon glyphicon-plus-sign"></span></button>
					</form>
				</div>
				<div>
					<form action="{{ path('eureka_g6k_admin_simulator_crud', {'simulator': 'new', 'crud': 'import'}) }}">
					<button id="btnImportSimulator" class="btn btn-default pull-right">{{ 'Import simulator'|trans }} <span class="glyphicon glyphicon-import"></span></button>
					</form>
				</div>
				<ul class="nav nav-pills nav-stacked">
					{% for simu in simulators %}
					<li><a href="{{ path('eureka_g6k_admin_simulators') }}/{{ simu.file }}">{{ simu.label }}</a></li>
					{% endfor %}
				</ul>
			</div>
		</div>
	</div>
	<div id="trigger"></div>
</div>

<div id="page-wrapper" class="content">
	<div id="page-simulators">
		<div class="row">
			<div class="col-md-12">
				{% if simulator is not empty %}
				<div class="panel-group" id="simulator" role="tablist" aria-multiselectable="true">
					<div class="panel panel-primary">
						<div id="simulator-options-panel" class="panel-heading" role="tab">
							{% if hiddens.action != 'create' %}
							<a href="{{ path('eureka_g6k_admin_simulator_calcul', {'simu': simulator.name, 'view': simulator.defaultView }) }}" class="btn btn-primary pull-right view-button" target="_blank">{{ 'Try it'|trans }} <span class="glyphicon glyphicon-eye-open"></span></a>
							{% endif %}
							<button class="btn btn-primary pull-right update-button edit-simulator">{{ 'Edit'|trans }} <span class="glyphicon glyphicon-pencil"></span></button>
							{% if hiddens.action != 'create' %}
							<a class="btn btn-primary pull-right link-button export-simulator" href="{{ path('eureka_g6k_admin_simulator_crud', {'simulator': simulator.name, 'crud': 'export'}) }}">{{ 'Export simulator'|trans }} <span class="glyphicon glyphicon-export"></span></a>
							{% if hiddens.updated %}
							<a class="btn btn-primary pull-right link-button publish-simulator" href="{{ path('eureka_g6k_admin_simulator_crud', {'simulator': simulator.name, 'crud': 'publish'}) }}">{{ 'Publish simulator'|trans }} <span class="glyphicon glyphicon-share"></span></a>
							{% endif %}
							{% endif %}
							<form id="save-form" action="{{ path('eureka_g6k_admin_simulator_crud', {'simulator': simulator.name, 'crud': 'save'}) }}" method="post">
							<input type="hidden" name="simulator" value="" />
							<input type="hidden" name="datas" value="" />
							<input type="hidden" name="rules" value="" />
							<input type="hidden" name="steps" value="" />
							<input type="hidden" name="sources" value="" />
							<input type="hidden" name="update" value="true" />
							{% if hiddens.action == 'create' -%}<input type="hidden" name="create" value="true" />{%- endif %}
							<h4 class="panel-title">{{ simulator.label }}</h4>
							</form>
						</div>
						<div class="panel-body">
							<div class="panel panel-default" id="simulator-attributes-panel-holder">
								<div class="panel-body">
									<div class="attributes-container">
										<div>
										{{ _self.showAttribute('simulator', 'text', 'name', 'Name'|trans, simulator.name, true, 'name') }}
										{{ _self.showAttribute('simulator', 'text', 'label', 'Label'|trans, simulator.label, true, 'label') }}
										{{ _self.showAttribute('simulator', 'text', 'defaultView', 'Default view'|trans, simulator.defaultView, true, 'defaultView') }}
										{{ _self.showAttribute('simulator', 'text', 'referer', 'Main referer'|trans, simulator.referer, true, 'referer') }}
										{{ _self.showAttribute('simulator', 'select', 'dateFormat', 'Date format'|trans, simulator.dateFormat, true, 'Select a format'|trans, { 'd/m/Y':'d/m/Y', 'm/d/Y':'m/d/Y', 'd-m-Y':'d-m-Y', 'm-d-Y':'m-d-Y', 'Y-m-d':'Y-m-d' }) }}
										{{ _self.showAttribute('simulator', 'text', 'decimalPoint', 'Decimal point'|trans, simulator.decimalPoint, true, 'Decimal point'|trans) }}
										{{ _self.showAttribute('simulator', 'select', 'moneySymbol', 'Currency symbol'|trans, simulator.moneySymbol, true, 'Select a symbol'|trans, {'฿':'฿', 'B/.':'B/.', '₵':'₵', '¢':'¢', '₡':'₡', 'Kč':'Kč', '$':'$', '₫':'₫', '€':'€', 'ƒ':'ƒ', 'Ft':'Ft', '₲':'₲', '₴':'₴', '₭':'₭', 'L':'L', '£ / ₤':'£ / ₤', '₺':'₺', '₥':'₥', '₦':'₦', 'S/.':'S/.', '₱':'₱', 'P':'P', 'R':'R', 'RM':'RM', '₹ / ₨':'₹ / ₨', '৲':'৲', '৳':'৳', 'R$':'R$', '₪':'₪', '₮':'₮', '₩':'₩', '¥':'¥', 'Ұ':'Ұ', 'zł':'zł' }) }}
										{{ _self.showAttribute('simulator', 'select', 'symbolPosition', 'Symbol position'|trans, simulator.symbolPosition, true, 'Select a position'|trans, {'before':'before currency'|trans, 'after':'after currency'|trans}) }}
										{{ _self.showAttribute('simulator', 'checkbox', 'dynamic', 'Interactive UI'|trans, simulator.dynamic, true, 'dynamic') }}
										{{ _self.showAttribute('simulator', 'checkbox', 'memo', 'Data memo ?'|trans, simulator.memo, true, 'memo') }}
										</div>
									</div>
								</div>
							</div>
							<div class="panel panel-default" id="simulator-description-panel-holder">
								<div class="panel-heading">
									{{ 'Description'|trans }}
								</div>
								<div class="panel-body simulator-description rich-text">
									{{ _self.paragraphs(simulator.description) }}
								</div>
							</div>
							<div class="panel panel-default" id="simulator-related-informations-panel-holder">
								<div class="panel-heading">
									{{ 'Related informations'|trans }}
								</div>
								<div class="panel-body simulator-related-informations rich-text">
									{{ _self.paragraphs(simulator.relatedInformations) }}
								</div>
							</div>
							<div class="panel panel-default" id="simulator-elements-panel">
							{{ _self.showSources ( simulator ) }}
							{{ _self.showDatas ( simulator ) }}
							{{ _self.showSteps ( simulator ) }}
							{{ _self.showBusinessRules ( simulator ) }}
							</div>
						</div>
					</div>
				</div>
				{% elseif hiddens.action == 'import' %}
				<div id="simulator" class="panel panel-primary">
					<div class="panel-heading">
					<h4 class="panel-title">{{ 'Simulator : import'|trans }}</h4>
					</div>
					<div class="panel-body">
						<div class="alert alert-danger" role="alert">
							<span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
							<span class="sr-only">{{ 'Error'|trans }} :</span>
							<span class="error-message"></span>
							<ul></ul>
						</div>
						<form id="simulator-import-form" method="post" action="{{ path('eureka_g6k_admin_simulator_crud', {'simulator': 'new', 'crud': 'doimport'}) }}" enctype="multipart/form-data">
						<div class="panel panel-default" id="simulator-import-panel-holder">
							<div class="panel-heading">
								{{ 'Import simulator'|trans }}
							</div>
							<div class="panel-body simulator-file">
								<div class="form-group col-sm-12">    
									<label class="col-sm-2 control-label" for="simulator-file">{{ 'Simulator file'|trans }}</label>    
									<div class="col-sm-10">        
										<input type="file" name="simulator-file" accept=".xml" class="form-control input-sm" />
									</div>
								</div>
								<div class="form-group col-sm-12">    
									<label class="col-sm-2 control-label" for="simulator-stylesheet">{{ 'Stylesheet (optional)'|trans }}</label>    
									<div class="col-sm-10">        
										<input type="file" name="simulator-stylesheet" accept="text/css" class="form-control input-sm" />
									</div>
								</div>
							</div>
						</div>
						<button id="btnDoImportSimulator" class="btn btn-primary pull-right">{{ 'Import'|trans }}</button>
						</form>
					</div>
				</div>
				{% endif %}
			</div>
		</div>
	</div>
</div>
{% endblock %}

{% block scripts %}
{{ parent() }}<script type="text/javascript" src="{{ asset('bundles/eurekag6k/admin/js/g6k.admin.simulators.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/eurekag6k/admin/js/g6k.admin.simulators.datas.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/eurekag6k/admin/js/g6k.admin.simulators.sources.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/eurekag6k/admin/js/g6k.admin.simulators.rules.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/eurekag6k/admin/js/g6k.admin.simulators.steps.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/eurekag6k/admin/js/css-validator/csslint.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/eurekag6k/admin/js/jquery.jeditable/jquery.jeditable.js') }}"></script>
{% endblock %}
 
{% macro showDatas(simulator) %}
{{ _self.openCollapsiblePanel('datas' , 'Datas'|trans, 'primary', '', 'sortable', [{ 'class': 'add-data', 'label': 'Add data'|trans, 'icon': 'glyphicon-plus-sign' }, { 'class': 'add-datagroup', 'label': 'Add datagroup'|trans, 'icon': 'glyphicon-plus-sign' }] ) }}
{% for data in simulator.datas %}
	{% if data.class == "DataGroup" %}
	{{ _self.openCollapsiblePanel('datagroup-' ~ data.id , 'Group ' ~ data.label, 'success', loop.index == 1 ? 'in' : '', 'sortable', [{ 'class': 'delete-datagroup', 'label': 'Delete'|trans , 'icon': 'glyphicon-minus-sign' }, { 'class': 'add-data', 'label': 'Add data'|trans, 'icon': 'glyphicon-plus-sign' }, { 'class': 'edit-datagroup', 'label': 'Edit datagroup'|trans, 'icon': 'glyphicon-pencil' }] ) }}
	<div class="panel panel-default data-container datagroup" id="datagroup-{{ data.id }}-attributes-panel" data-id="{{ data.id }}">
		<div class="panel-body">
			<div class="attributes-container">
				<div>
				{{ _self.showAttribute('datagroup-'~data.id, 'text', 'name', 'Group Name'|trans, data.name, true, 'Group name'|trans) }}
				{{ _self.showAttribute('datagroup-'~data.id, 'text', 'label', 'Group Label'|trans, data.label, true, 'Group label'|trans) }}
				</div>
			</div>
		</div>
	</div>
	<div class="panel panel-default description-panel" id="datagroup-{{ data.id }}-description-panel">
		<div class="panel-heading">
			{{ 'Description'|trans }}
		</div>
		<div class="panel-body  datagroup-description rich-text">
			{{ _self.paragraphs(data.description) }}
		</div>
	</div>
	<div class="panel panel-default datas-panel" id="datagroup-{{ data.id }}-datas-panel">
		<div class="panel-body sortable">
		{% for gdata in data.datas %}
			{{ _self.showData(gdata, 'datagroup-data', loop.index == 1 ? 'in' : '') }}
		{% endfor %}
		</div>
	</div>
	{{ _self.closeCollapsiblePanel() }}  
	{% else %}
	{{ _self.showData(data, 'data', loop.index == 1 ? 'in' : '') }}
	{% endif %}
{% endfor %}
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}

{% macro showBusinessRules(simulator) %}
{{ _self.openCollapsiblePanel('businessrules' , 'Business rules'|trans, 'primary', '', 'sortable', [{ 'class': 'add-rule', 'label': 'Add'|trans, 'icon': 'glyphicon-plus-sign' }] ) }}
<div id="business-rules">
{% for rule in simulator.businessRules %}
	<div id="{{ rule.elementId }}" class="panel panel-info sortable rule-container">
		<div class="panel-heading" role="tab">
			<button class="btn btn-info pull-right update-button delete-rule" data-parent="#{{ rule.elementId }}">{{ 'Delete'|trans }} <span class="glyphicon glyphicon-minus-sign"></span></button>
			<button class="btn btn-info pull-right update-button edit-rule" data-parent="#{{ rule.elementId }}">{{ 'Edit'|trans }} <span class="glyphicon glyphicon-pencil"></span></button>
			<h4 class="panel-title">
				<a data-toggle="collapse" data-parent="#business-rules" href="#collapse{{ rule.elementId }}" aria-expanded="true" aria-controls="collapse{{ rule.elementId }}">{{ 'Rule'|trans }} #<span class="rule-id">{{ rule.id }}</span> <span class="rule-name">{{ rule.name }}</span> : <span class="rule-label">{{ rule.label }}</span></a>
			</h4>
		</div>
		<div id="collapse{{ rule.elementId }}" class="panel-body panel-collapse collapse" role="tabpanel">
			<div class="panel panel-default conditions-panel">
				<div class="panel-heading"><h4>{{ 'When ...'|trans }}</h4></div>
				<div class="panel-body">
					<ul class="rule-conditions" data-value="{{ rule.conditions }}" data-rule-element-id="{{ rule.elementId }}" data-rule-id="{{ rule.id }}">
					{{ _self.showCondition(rule.extendedConditions) }}
					</ul>
				</div>
			</div>
			{% if rule.ifActions is not empty %}
			<div class="panel panel-default if-actions-panel">
				<div class="panel-heading"><h4>{{ 'then do ...'|trans }}</h4></div>
				<div class="panel-body">
					{% for action in rule.ifActions %}
					{{ _self.showRuleAction(action, simulator) }}
					{% endfor %}
				</div>
			</div>
			{% endif %}
			{% if rule.elseActions is not empty %}
			<div class="panel panel-default else-actions-panel">
				<div class="panel-heading"><h4>{{ 'else do ...'|trans }}</h4></div>
				<div class="panel-body">
					{% for action in rule.elseActions %}
					{{ _self.showRuleAction(action, simulator) }}
					{% endfor %}
				</div>
			</div>
			{% endif %}
		</div>
	</div>
{% endfor %}
</div>
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}

{% macro showRuleAction(action, simulator) %}
<div class="rule-action" data-id="{{ action.id }}" data-name="{{ action.name }}" data-target="{{ action.target }}" data-data="{{ action.data }}" data-datagroup="{{ action.datagroup }}" data-step="{{ action.step }}" data-panel="{{ action.panel }}" data-fieldset="{{ action.fieldset }}" data-field="{{ action.field }}" data-blockinfo="{{ action.blockinfo }}" data-chapter="{{ action.chapter }}" data-section="{{ action.section }}" data-prenote="{{ action.prenote }}" data-postnote="{{ action.postnote }}" data-action="{{ action.action }}" data-footnote="{{ action.footnote }}" data-choice="{{ action.choice }}" data-value="{{ action.value }}">
{% if action.name == 'notifyError' or action.name == 'notifyWarning' %}
	<span class="action-name">{{ action.name == 'notifyError' ? 'notify Error'|trans : 'notify Warning'|trans }} : </span> <span class="action-value">«{{ action.value }}»</span> <span class="action-target"> {{ 'on'|trans }} {{ action.target|trans }} </span>
	{% if action.target == 'data' %}
		<span class="action-data">«{{ simulator.getDataById(action.data).label }}»</span>
	{% elseif action.target == 'datagroup' %}
		<span class="action-datagroup">«{{ simulator.getDataGroupById(action.datagroup).label }}»</span>
	{% endif %}
{% elseif action.name == 'hideObject' or action.name == 'showObject' %}
	{% set step = simulator.getStepById(action.step) %}
	<span class="action-name">{{ action.name == 'hideObject' ? 'hide'|trans : 'show'|trans }}</span> <span class="action-target">{{ action.target|trans }}</span>
	{% if action.target == 'step' %}
		<span class="action-step">«{{ step.label }}»</span>
	{% elseif action.target == 'panel' %}
		<span class="action-panel">«{{ action.panel }}»</span>
		<span class="action-step"> {{ 'of step «%label%»'|trans({'%label%': step.label}) }}</span>
	{% elseif action.target == 'fieldset' %}
		<span class="action-fieldset">«{{ action.fieldset }}»</span>
		<span class="action-panel"> {{ 'in panel «%panel%»'|trans({'%panel%': action.panel}) }}</span>
		<span class="action-step"> {{ 'of step «%label%»'|trans({'%label%': step.label}) }}</span>
	{% elseif action.target == 'field' %}
		<span class="action-field">«{{ step.panelById(action.panel).fieldSetById(action.fieldset).fieldByPosition(action.field).label }}»</span>
		<span class="action-fieldset"> {{ 'in fieldset «%fieldset%»'|trans({'%fieldset%': action.fieldset}) }}</span>
		<span class="action-panel"> {{ 'of panel «%panel%»'|trans({'%panel%': action.panel}) }}</span>
		<span class="action-step"> {{ 'of step «%label%»'|trans({'%label%': step.label}) }}</span>
	{% elseif action.target == 'blockinfo' %}
		<span class="action-blockinfo">«{{ action.blockinfo }}»</span>
		<span class="action-panel"> {{ 'in panel «%panel%»'|trans({'%panel%': action.panel}) }}</span>
		<span class="action-step"> {{ 'of step «%label%»'|trans({'%label%': step.label}) }}</span>
	{% elseif action.target == 'chapter' %}
		<span class="action-chapter">«{{ step.panelById(action.panel).blockInfoById(action.blockinfo).chapterById(action.chapter).label }}»</span>
		<span class="action-blockinfo"> {{ 'in blockinfo «%blockinfo%»'|trans({'%blockinfo%': action.blockinfo}) }}</span>
		<span class="action-panel"> {{ 'of panel «%panel%»'|trans({'%panel%': action.panel}) }}</span>
		<span class="action-step"> {{ 'of step «%label%»'|trans({'%label%': step.label}) }}</span>
	{% elseif action.target == 'section' %}
		<span class="action-section">«{{ step.panelById(action.panel).blockInfoById(action.blockinfo).chapterById(action.chapter).sectionById(action.section).label }}»</span>
		<span class="action-chapter"> {{ 'in'|trans }} «{{ step.panelById(action.panel).blockInfoById(action.blockinfo).chapterById(action.chapter).label }}»</span>
		<span class="action-blockinfo"> {{ 'of blockinfo «%blockinfo%»'|trans({'%blockinfo%': action.blockinfo}) }}</span>
		<span class="action-panel"> {{ 'of panel «%panel%»'|trans({'%panel%': action.panel}) }}</span>
		<span class="action-step"> {{ 'of step «%label%»'|trans({'%label%': step.label}) }}</span>
	{% elseif action.target == 'prenote' %}
		<span class="action-prenote"> {{ 'of field «%label%»'|trans({'%label%': step.panelById(action.panel).fieldSetById(action.fieldset).fieldByPosition(action.prenote).label}) }}</span>
		<span class="action-fieldset"> {{ 'in fieldset «%fieldset%»'|trans({'%fieldset%': action.fieldset}) }}</span>
		<span class="action-panel"> {{ 'of panel «%panel%»'|trans({'%panel%': action.panel}) }}</span>
		<span class="action-step"> {{ 'of step «%label%»'|trans({'%label%': step.label}) }}</span>
	{% elseif action.target == 'postnote' %}
		<span class="action-postnote"> {{ 'of field «%label%»'|trans({'%label%': step.panelById(action.panel).fieldSetById(action.fieldset).fieldByPosition(action.postnote).label}) }}</span>
		<span class="action-fieldset"> {{ 'in fieldset «%fieldset%»'|trans({'%fieldset%': action.fieldset}) }}</span>
		<span class="action-panel"> {{ 'of panel «%panel%»'|trans({'%panel%': action.panel}) }}</span>
		<span class="action-step"> {{ 'of step «%label%»'|trans({'%label%': step.label}) }}</span>
	{% elseif action.target == 'footnote' %}
		<span class="action-footnote">«{{ action.footnote }}»</span>
		<span class="action-step"> {{ 'of step «%label%»'|trans({'%label%': step.label}) }}</span>
	{% elseif action.target == 'action' %}
		<span class="action-action">«{{ action.action }}»</span>
		<span class="action-step"> {{ 'of step «%label%»'|trans({'%label%': step.label}) }}</span>
	{% elseif action.target == 'choice' %}
		<span class="action-choice">«{{ action.choice }}»</span>
		<span class="action-data"> {{ 'of data «%label%»'|trans({'%label%': simulator.replaceByDataLabel(action.data).label}) }}</span>
	{% endif %}
{% elseif action.name == 'setAttribute' %}
	<span class="action-name">{{ 'set'|trans }}</span> <span class="action-target">{{ action.target|trans }}</span> <span class="action-data"> {{ 'of «%label%»'|trans({'%label%': simulator.getDataById(action.data).label}) }}</span> <span class="action-value"> {{ 'to'|trans }} {{ simulator.replaceByDataLabel(action.value)|trans }}</span>
{% endif %}
</div>
{% endmacro %}

{% macro showSteps(simulator) %}
{{ _self.openCollapsiblePanel('steps' , 'Steps'|trans, 'primary', '', 'sortable', [{ 'class': 'add-step', 'label': 'Add'|trans, 'icon': 'glyphicon-plus-sign' }] ) }}
{% for step in simulator.steps %}
	{% set buttons = [{ 'class': 'delete-step', 'label': 'Delete'|trans, 'icon': 'glyphicon-minus-sign' }] %}
	{% if not step.footNotes %}
	{% set buttons = buttons|merge([{ 'class': 'add-footnotes', 'label': 'Add footnotes'|trans, 'icon': 'glyphicon-plus-sign' }]) %}
	{% endif %}
	{% set buttons = buttons|merge([{ 'class': 'add-panel', 'label': 'Add panel'|trans, 'icon': 'glyphicon-plus-sign' }, { 'class': 'edit-step', 'label': 'Edit'|trans, 'icon': 'glyphicon-pencil' }]) %}
	{{ _self.openCollapsiblePanel('step-' ~ step.id, 'Step'|trans ~ ' #'~step.id~' : ' ~ step.label, 'info', loop.index == 1 ? 'in' : '', '', buttons ) }}
	<div class="panel panel-default step-container" id="step-{{ step.id }}-attributes-panel" data-id="{{ step.id }}">
		<div class="panel-body">
			<div class="attributes-container">
				<div>
				{{ _self.showAttribute('step-'~step.id, 'text', 'name', 'Step Name'|trans, step.name, true, 'Step Name'|trans) }}
				{{ _self.showAttribute('step-'~step.id, 'text', 'label', 'Step Label'|trans, step.label, true, 'Step Label'|trans) }}
				{{ _self.showAttribute('step-'~step.id, 'text', 'template', 'Step Template'|trans, step.template, true, 'Step Template'|trans) }}
				{{ _self.showAttribute('step-'~step.id, 'select', 'output', 'Output'|trans, step.output, false, 'Select an output', {'normal':'Normal'|trans, 'inlinePDF':'Inline PDF'|trans, 'downloadablePDF':'Downloadable PDF'|trans, 'html':'html'}) }}
				{{ _self.showAttribute('step-'~step.id, 'checkbox', 'dynamic', 'Interactive UI'|trans, step.dynamic, false, 'dynamic') }}
				</div>
			</div>
			<div class="panel panel-default description-panel elements-container" id="step-{{ step.id }}-description-panel">
				<div class="panel-heading">
					{{ 'Description'|trans }}
				</div>
				<div class="panel-body step-description rich-text">
					{{ _self.paragraphs(step.description) }}
				</div>
			</div>
		</div>
	</div>
	<div class="panel panel-default panels-panel" id="step-{{ step.id }}-panels-panel">
		<div class="panel-body sortable">
		{% for panel in step.panels %}
			{{ _self.showPanel(step, panel, loop.index == 1 ? 'in' : '') }}
		{% endfor %}
		</div>
	</div>
	{{ _self.showActionButtons(step) }}  
	{% if step.footNotes %}
	{{ _self.showFootNotes(step) }}  
	{% endif %}
	{{ _self.closeCollapsiblePanel() }}  
{% endfor %}
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}

{% macro showFootNotes(step) %}
{{ _self.openCollapsiblePanel('step-' ~ step.id ~ '-footnotes' , 'FootNotes'|trans, 'success', '', '', [{ 'class': 'delete-footnotes', 'label': 'Delete'|trans, 'icon': 'glyphicon-minus-sign' }, { 'class': 'add-footnote', 'label': 'Add footnote'|trans, 'icon': 'glyphicon-plus-sign' }, { 'class': 'edit-footnotes', 'label': 'Edit'|trans, 'icon': 'glyphicon-pencil' }] ) }}
<div class="panel panel-default footnotes-container" id="step-{{ step.id }}-footnotes-attributes-panel" data-step="{{ step.id }}">
	<div class="panel-body">
		<div class="attributes-container">
			<div>
			{{ _self.showAttribute('step-'~step.id~ '-footnotes', 'select', 'position', 'Position'|trans, step.footNotes.position, true, 'Select a position'|trans, { 'beforeActions':'before action buttons'|trans, 'afterActions':'after action buttons'|trans } ) }}
			</div>
		</div>
	</div>
</div>
<div class="footnotes-panel sortable">
{% for footnote in step.footNotes.footNotes %}
{% set footnoteElementId = 'step-'~step.id~'-footnotes-footnote-'~footnote.id %}
<div class="panel panel-default footnote-container" id="{{ footnoteElementId }}-panel" data-step="{{ step.id }}" data-id="{{ footnote.id}}">
	<div class="panel-heading">
		<button class="btn btn-default pull-right update-button delete-footnote" data-parent="#{{ footnoteElementId }}-panel">{{ 'Delete'|trans }} <span class="glyphicon glyphicon-minus-sign"></span></button>
		<button class="btn btn-default pull-right update-button edit-footnote" data-parent="#{{ footnoteElementId }}-panel">{{ 'Edit'|trans }} <span class="glyphicon glyphicon-plus-sign"></span></button>
		<h4 class="panel-title">
			{{ 'FootNote #%id%'|trans({'%id%': footnote.id }) }}
		</h4>
	</div>
	<div class="panel-body step-footnote rich-text">
	{{ _self.paragraphs(footnote.text) }}
	</div>
</div>
{% endfor %}
</div>
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}

{% macro showActionButtons(step) %}
<div class="actions-buttons-panel">
{{ _self.openCollapsiblePanel('step-' ~ step.id ~ '-action-buttons' , 'Actions Buttons'|trans, 'success', '', 'sortable', [{ 'class': 'add-action-button', 'label': 'Add action button'|trans, 'icon': 'glyphicon-plus-sign' }] ) }}
{% for action in step.actions %}
{{ _self.showActionButton(step, action) }}
{% endfor %}
{{ _self.closeCollapsiblePanel() }}  
</div>
{% endmacro %}

{% macro showActionButton(step, action) %}
{{ _self.openCollapsiblePanel('step-' ~ step.id ~ '-action-button-' ~ action.name , 'Action Button'|trans ~ ' : ' ~ action.label, 'default', '', '', [{ 'class': 'delete-action-button', 'label': 'Delete'|trans, 'icon': 'glyphicon-minus-sign' }, { 'class': 'edit-action-button', 'label': 'Edit'|trans, 'icon': 'glyphicon-pencil' }] ) }}
<div class="panel panel-default action-button-container" id="step-{{ step.id }}-action-button-{{ action.name }}-attributes-panel" data-step="{{ step.id }}" data-id="{{ action.name }}">
	<div class="panel-body">
		<div class="attributes-container">
			<div>
			{{ _self.showAttribute('step-'~step.id~ '-action-button-' ~ action.name, 'text', 'name', 'Name'|trans, action.name, true, 'Button name'|trans) }}
			{{ _self.showAttribute('step-'~step.id~ '-action-button-' ~ action.name, 'text', 'label', 'Label'|trans, action.label, true, 'Button label'|trans) }}
			{{ _self.showAttribute('step-'~step.id~ '-action-button-' ~ action.name, 'select', 'what', 'What'|trans, action.what, true, 'Select an action'|trans, { 'submit':'Submit'|trans, 'reset':'Reset'|trans } ) }}
			{{ _self.showAttribute('step-'~step.id~ '-action-button-' ~ action.name, 'select', 'for', 'For'|trans, action.for, true, 'Select a target step'|trans, { 'priorStep':'Prior step'|trans, 'currentStep':'Current step'|trans, 'nextStep':'Next step'|trans, 'jumpToStep':'Jump to step'|trans, 'newSimulation':'New simulation'|trans, 'externalPage':'External page'|trans } ) }}
			{{ _self.showAttribute('step-'~step.id~ '-action-button-' ~ action.name, 'text', 'uri', 'URI'|trans, action.uri, false, 'Button uri'|trans) }}
			{{ _self.showAttribute('step-'~step.id~ '-action-button-' ~ action.name, 'text', 'class', 'Class'|trans, action.class, false, 'Button class'|trans) }}
			</div>
		</div>
	</div>
</div>
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}

{% macro showSources(simulator) %}
{{ _self.openCollapsiblePanel('sources' , 'Used dasources'|trans, 'primary', '', 'sortable', [{ 'class': 'add-source', 'label': 'Add'|trans, 'icon': 'glyphicon-plus-sign' }] ) }}
{% for source in simulator.sources %}
	{{ _self.showSource(simulator, source, 'source', loop.index == 1 ? 'in' : '') }}
{% endfor %}
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}

{% macro showSource(simulator, source, containerType, inClass) %}
{{ _self.openCollapsiblePanel('source-' ~ source.id , '#'~source.id, 'info', inClass, '', [{ 'class': 'delete-source', 'label': 'Delete'|trans, 'icon': 'glyphicon-minus-sign' }, { 'class': 'edit-source', 'label': 'Edit'|trans, 'icon': 'glyphicon-pencil' } ] ) }}
<div class="panel panel-default {{ containerType }}-container" id="source-{{ source.id }}-attributes-panel" data-id="{{ source.id }}">
	<div class="panel-body">
		<div class="attributes-container">
			<div>
			{{ _self.showAttribute('source-'~source.id, 'text', 'datasource', 'Datasource'|trans, source.datasource, true, 'Datasource'|trans) }}
			{{ _self.showAttribute('source-'~source.id, 'text', 'request', 'Request'|trans, source.request, false, 'Request'|trans) }}
			{{ _self.showAttribute('source-'~source.id, 'select', 'returnType', 'Return type'|trans, source.returnType, true, 'Select a return type'|trans, { 'json':'JSON'|trans, 'xml':'XML'|trans, 'singleValue':'Single value'|trans, 'assocArray':'Associative array'|trans, 'html':'HTML'|trans, 'csv':'Comma separated value (csv)'|trans } ) }}
			{{ _self.showAttribute('source-'~source.id, 'text', 'returnPath', 'Return path'|trans, source.returnPath, false, 'Return path'|trans) }}
			{{ _self.showAttribute('source-'~source.id, 'text', 'separator', 'Separator'|trans, source.separator, false, 'Separator'|trans) }}
			{{ _self.showAttribute('source-'~source.id, 'text', 'delimiter', 'Delimiter'|trans, source.delimiter, false, 'Delimiter'|trans) }}
			</div>
		</div>
	</div>
</div>
{% if source.parameters is not empty %}
<div class="panel panel-default source-parameters-panel" id="source-{{ source.id }}-source-parameters-panel">
	<div class="panel-heading">
		{{ 'Parameters'|trans }}
	</div>
	<div class="panel-body">
		{% for parameter in source.parameters %}
		{% set paramId = loop.index %}
		{% set data = simulator.dataById(parameter.data) %}
		<div class="panel panel-default source-parameter-container" data-id="{{ paramId }}">
			<div class="panel-heading">
				{{ 'Parameter %id%'|trans({ '%id%' : paramId }) }}
			</div>
			<div class="panel-body" id="source-{{ source.id }}-source-parameter-{{ paramId }}-panel">
				<div class="attributes-container">
					<div>
						{{ _self.showAttribute('source-'~source.id~'-source-parameter-'~paramId, 'select', 'type', 'Type'|trans, parameter.type, true, 'Select a type'|trans, { 'queryString':'Query string'|trans, 'path':'PATH'|trans, 'data':'Data'|trans, 'columnValue':'Column value'|trans } ) }}
						{{ _self.showAttribute('source-'~source.id~'-source-parameter-'~paramId, 'text', 'name', 'Name'|trans, parameter.name, false, 'Parameter name'|trans) }}
						<div class="form-group col-sm-12">
							<label class="col-sm-2 control-label">{{ 'Data'|trans }}</label>
							<div class="col-sm-10">
								<p data-attribute="data" data-value="{{ data.name }}" class="form-control-static simple-value">{{ data.label }}</p>
							</div>
						</div>
						{% if data.type == 'date' or data.type == 'day' or data.type == 'month' or data.type == 'year' %}
							{{ _self.showAttribute('source-'~source.id~'-source-parameter-'~paramId, 'text', 'format', 'Format'|trans, parameter.format, false, 'Date format of the parameter with characters : d, j, D, l or z (day) - F, M, m or n (month) - Y, y (year)'|trans) }}
						{% endif %}
					</div>
				</div>
			</div>
		</div>
		{% endfor %}
	</div>
</div>
{% endif %}
{{ _self.closeCollapsiblePanel() }}
{% endmacro %}

{% macro showPanel(step, panel, inClass) %}
{{ _self.openCollapsiblePanel('step-' ~ step.id ~ '-panel-' ~ panel.id , 'Panel'|trans ~ ' #' ~ panel.id ~ ' : ' ~ panel.label, 'success', inClass, '', [{ 'class': 'delete-panel', 'label': 'Delete'|trans, 'icon': 'glyphicon-minus-sign' }, { 'class': 'add-fieldset', 'label': 'Add fieldset'|trans, 'icon': 'glyphicon-plus-sign' }, { 'class': 'add-blockinfo', 'label': 'Add blockinfo'|trans, 'icon': 'glyphicon-plus-sign' }, { 'class': 'edit-panel', 'label': 'Edit'|trans, 'icon': 'glyphicon-pencil' } ] ) }}
<div class="panel panel-default panel-container" id="step-{{ step.id }}-panel-{{ panel.id }}-attributes-panel" data-step="{{ step.id }}" data-id="{{ panel.id }}">
	<div class="panel-body">
		<div class="attributes-container">
			<div>
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id, 'text', 'name', 'Name'|trans, panel.name, true, 'Panel name'|trans) }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id, 'text', 'label', 'Label'|trans, panel.label, true, 'Panel label'|trans) }}
			</div>
		</div>
	</div>
</div>
<div class="panel panel-default blocks-panel" id="step-{{ step.id }}-panel-{{ panel.id }}-blocks-panel">
	<div class="panel-body sortable">
	{% for blck in panel.fieldSets %}
		{% if blck.class == "FieldSet" %}
		{{ _self.showFieldSet(step, panel, blck, loop.index == 1 ? 'in' : '') }}
		{% elseif blck.class == 'BlockInfo' %}
		{{ _self.showBlockInfo(step, panel, blck, loop.index == 1 ? 'in' : '') }}
		{% endif %}
	{% endfor %}
	</div>
</div>
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}

{% macro showFieldSet(step, panel, fieldset, inClass) %}
{{ _self.openCollapsiblePanel('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-fieldset-' ~ fieldset.id , 'FieldSet'|trans ~ ' #' ~ fieldset.id ~ ' : ' ~  fieldset.legend, 'info', inClass, '', [{ 'class': 'delete-fieldset', 'label': 'Delete'|trans, 'icon': 'glyphicon-minus-sign' }, { 'class': 'add-field', 'label': 'Add field'|trans, 'icon': 'glyphicon-plus-sign' }, { 'class': 'edit-fieldset', 'label': 'Edit'|trans, 'icon': 'glyphicon-pencil' } ] ) }}
<div class="panel panel-default block-container fieldset" id="step-{{ step.id }}-panel-{{ panel.id }}-fieldset-{{ fieldset.id }}-attributes-panel" data-step="{{ step.id }}" data-panel="{{ panel.id }}" data-id="{{ fieldset.id }}">
	<div class="panel-body">
		<div class="attributes-container">
			<div>
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-fieldset-' ~ fieldset.id, 'select', 'disposition', 'Disposition'|trans, fieldset.disposition, false, 'Select a Disposition'|trans, {'classic':'Classic'|trans, 'grid':'Grid'|trans}) }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-fieldset-' ~ fieldset.id, 'select', 'display', 'Display'|trans, fieldset.display, false, 'Select a Display'|trans, {'inline':'Inline'|trans, 'pop-in':'Pop-in'|trans}) }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-fieldset-' ~ fieldset.id, 'text', 'popinLink', 'Pop-in Link'|trans, fieldset.popinLink, false, 'Pop-in Link'|trans) }}
			</div>
		</div>
		<div class="panel panel-default legend-panel elements-container" id="step-{{ step.id }}-panel-{{ panel.id }}-fieldset-{{ fieldset.id }}-legend-panel">
			<div class="panel-heading">
			{{ 'Legend'|trans }}
			</div>
			<div class="panel-body fieldset-legend rich-text">
				{{ _self.paragraphs(fieldset.legend) }}
			</div>
		</div>
	</div>
</div>
<div class="panel panel-default columns-panel" id="step-{{ step.id }}-panel-{{ panel.id }}-fieldset-{{ fieldset.id }}-columns-panel">
	<div class="panel-body sortable">
	{% for column in fieldset.columns %}
	{#	{{ _self.showFieldSetColumn(step, panel, fieldset, column, loop.index == 1 ? 'in' : '') }} #}
	{% endfor %}
	</div>
</div>
<div class="panel panel-default fields-panel" id="step-{{ step.id }}-panel-{{ panel.id }}-fieldset-{{ fieldset.id }}-fields-panel">
	<div class="panel-body sortable">
	{% for field in fieldset.fields %}
	{{ _self.showField(step, panel, fieldset, field, loop.index == 1 ? 'in' : '') }}
	{% endfor %}
	</div>
</div>
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}

{% macro showField(step, panel, fieldset, field, inClass) %}
{{ _self.openCollapsiblePanel('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position , 'Field'|trans ~ ' #' ~ field.position ~ ' : ' ~ field.label, 'warning', inClass, '', [{ 'class': 'delete-field', 'label': 'Delete'|trans, 'icon': 'glyphicon-minus-sign' }, { 'class': 'edit-field', 'label': 'Edit'|trans, 'icon': 'glyphicon-pencil' } ] ) }}
<div class="panel panel-default field-container" id="step-{{ step.id }}-panel-{{ panel.id }}-fieldset-{{ fieldset.id }}-field-{{ field.position }}-attributes-panel" data-step="{{ step.id }}" data-panel="{{ panel.id }}" data-fieldset="{{ fieldset.id }}" data-id="{{ field.position }}">
	<div class="panel-body">
		<div class="attributes-container">
			<div>
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'text', 'data', 'Data'|trans, field.fieldset.panel.step.simulator.getDataById(field.data).label, true, 'Field data'|trans) }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'text', 'label', 'Label'|trans, field.label, false, 'Field label'|trans) }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'select', 'usage', 'Usage'|trans, field.usage, true, 'Select an usage'|trans, {'input':'input'|trans, 'output':'output'|trans}) }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'text', 'prompt', 'Prompt'|trans, field.prompt, false, 'Field prompt'|trans) }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'checkbox', 'required', 'Required'|trans, field.required, false, 'required') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'checkbox', 'visibleRequired', 'Required if visible'|trans, field.visibleRequired, false, 'visibleRequired') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'checkbox', 'newline', 'Newline before field ?'|trans, field.newline, false, 'newline') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'checkbox', 'colon', 'Show colon after field label ?'|trans, field.colon, false, 'colon') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'checkbox', 'underlabel', 'Place the field under the label ?'|trans, field.underlabel, false, 'underlabel') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'checkbox', 'help', 'Show data description as help ?'|trans, field.help, false, 'help') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'checkbox', 'emphasize', 'Emphasize the text label ?'|trans, field.emphasize, false, 'emphasize') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'checkbox', 'expanded', 'Show choices as radio buttons ?'|trans, field.expanded, false, 'expanded') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'text', 'explanation', 'Explanation'|trans, field.explanation, field.explanation, false, 'Explanation'|trans) }}
			</div>
		</div>
		{% if field.preNote %}
		<div class="panel panel-default note-panel elements-container" id="step-{{ step.id }}-panel-{{ panel.id }}-fieldset-{{ fieldset.id }}-field-{{ field.position }}-note-panel">
			<div class="panel-heading">
				<span class="note-position pull-right">{{ 'Note position'|trans }} : {{ 'placed before the field'|trans }}</span> 
				{{ 'Note'|trans }}
			</div>
			<div class="panel-body field-note rich-text">
			{{ _self.paragraphs(field.preNote.text) }}
			</div>
		</div>
		{% elseif field.postNote %}
		<div class="panel panel-default note-panel elements-container" id="step-{{ step.id }}-panel-{{ panel.id }}-fieldset-{{ fieldset.id }}-field-{{ field.position }}-note-panel">
			<div class="panel-heading">
				<span class="note-position pull-right">{{ 'Note position'|trans }} : {{ 'placed after the field'|trans }}</span> 
				{{ 'Note'|trans }}
			</div>
			<div class="panel-body field-note rich-text">
			{{ _self.paragraphs(field.postNote.text) }}
			</div>
		</div>
		{% endif %}
	</div>
</div>
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}

{% macro showBlockInfo(step, panel, blockinfo, inClass) %}
{{ _self.openCollapsiblePanel('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-blockinfo-' ~ blockinfo.id , 'Blockinfo #%id% : %label%'|trans({'%id%': blockinfo.id, '%label%': blockinfo.label }), 'info', inClass, '', [{ 'class': 'delete-blockinfo', 'label': 'Delete'|trans, 'icon': 'glyphicon-minus-sign' }, { 'class': 'add-chapter', 'label': 'Add chapter'|trans, 'icon': 'glyphicon-plus-sign' }, { 'class': 'edit-blockinfo', 'label': 'Edit'|trans, 'icon': 'glyphicon-pencil' } ] ) }}
<div class="panel panel-default block-container blockinfo" id="step-{{ step.id }}-panel-{{ panel.id }}-blockinfo-{{ blockinfo.id }}-attributes-panel" data-step="{{ step.id }}" data-panel="{{ panel.id }}" data-id="{{ blockinfo.id }}">
	<div class="panel-body">
		<div class="attributes-container">
			<div>
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-blockinfo-' ~ blockinfo.id, 'text', 'name', 'Name'|trans, blockinfo.name, true, 'Blockinfo name'|trans) }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-blockinfo-' ~ blockinfo.id, 'text', 'label', 'Label'|trans, blockinfo.label, true, 'Blockinfo label'|trans) }}
			</div>
		</div>
	</div>
</div>
<div class="panel panel-default chapters-panel" id="step-{{ step.id }}-panel-{{ panel.id }}-blockinfo-{{ blockinfo.id }}-chapters-panel">
	<div class="panel-body sortable">
	{% for chapter in blockinfo.chapters %}
	{{ _self.showChapter(step, panel, blockinfo, chapter, loop.index == 1 ? 'in' : '') }}
	{% endfor %}
	</div>
</div>
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}

{% macro showChapter(step, panel, blockinfo, chapter, inClass) %}
{{ _self.openCollapsiblePanel('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-blockinfo-' ~ blockinfo.id ~ '-chapter-' ~ chapter.id , 'Chapter #%id% : %label%'|trans({'%id%': chapter.id, '%label%': chapter.label }), 'warning', inClass, '', [{ 'class': 'delete-chapter', 'label': 'Delete'|trans, 'icon': 'glyphicon-minus-sign' }, { 'class': 'add-section', 'label': 'Add section'|trans, 'icon': 'glyphicon-plus-sign' }, { 'class': 'edit-chapter', 'label': 'Edit'|trans, 'icon': 'glyphicon-pencil' } ] ) }}
<div class="panel panel-default chapter-container" id="step-{{ step.id }}-panel-{{ panel.id }}-blockinfo-{{ blockinfo.id }}-chapter-{{ chapter.id }}-attributes-panel" data-step="{{ step.id }}" data-panel="{{ panel.id }}" data-blockinfo="{{ blockinfo.id }}" data-id="{{ chapter.id }}">
	<div class="panel-body">
		<div class="attributes-container">
			<div>
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-blockinfo-' ~ blockinfo.id ~ '-chapter-' ~ chapter.id, 'text', 'name', 'Name'|trans, chapter.name, true, 'Chapter name'|trans) }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-blockinfo-' ~ blockinfo.id ~ '-chapter-' ~ chapter.id, 'text', 'label', 'Label'|trans, chapter.label, true, 'Chapter label'|trans) }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-blockinfo-' ~ blockinfo.id ~ '-chapter-' ~ chapter.id, 'text', 'icon', 'Icon'|trans, chapter.icon, false, 'Chapter icon'|trans) }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-blockinfo-' ~ blockinfo.id ~ '-chapter-' ~ chapter.id, 'checkbox', 'collapsible', 'Allow collapse/expand ?'|trans, chapter.collapsible, false, 'collapsible') }}
			</div>
		</div>
	</div>
</div>
<div class="panel panel-default sections-panel" id="step-{{ step.id }}-panel-{{ panel.id }}-blockinfo-{{ blockinfo.id }}-chapter-{{ chapter.id }}-sections-panel">
	<div class="panel-body sortable">
	{% for section in chapter.sections %}
	{{ _self.showSection(step, panel, blockinfo, chapter, section, loop.index == 1 ? 'in' : '') }}
	{% endfor %}
	</div>
</div>
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}


{% macro showSection(step, panel, blockinfo, chapter, section, inClass) %}
{{ _self.openCollapsiblePanel('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-blockinfo-' ~ blockinfo.id ~ '-chapter-' ~ chapter.id ~ '-section-' ~ section.id , 'Section #%id% : %label%'|trans({ '%id%': section.id, '%label%': section.label }), 'info', inClass, '', [{ 'class': 'delete-section', 'label': 'Delete'|trans, 'icon': 'glyphicon-minus-sign' }, { 'class': 'edit-section', 'label': 'Edit'|trans, 'icon': 'glyphicon-pencil' } ] ) }}
<div class="panel panel-default section-container" id="step-{{ step.id }}-panel-{{ panel.id }}-blockinfo-{{ blockinfo.id }}-chapter-{{ chapter.id }}-section-{{ section.id }}-attributes-panel" data-step="{{ step.id }}" data-panel="{{ panel.id }}" data-blockinfo="{{ blockinfo.id }}" data-chapter="{{ chapter.id }}" data-id="{{ section.id }}">
	<div class="panel-body">
		<div class="attributes-container">
			<div>
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-blockinfo-' ~ blockinfo.id ~ '-chapter-' ~ chapter.id ~ '-section-' ~ section.id, 'text', 'name', 'Name'|trans, section.name, true, 'Section name'|trans) }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-panel-' ~ panel.id ~ '-blockinfo-' ~ blockinfo.id ~ '-chapter-' ~ chapter.id ~ '-section-' ~ section.id, 'text', 'label', 'Label'|trans, section.label, false, 'Section label'|trans) }}
			</div>
		</div>
	</div>
</div>
<div class="panel panel-default content-panel" id="step-{{ step.id }}-panel-{{ panel.id }}-blockinfo-{{ blockinfo.id }}-chapter-{{ chapter.id }}-section-{{ section.id }}-content-panel">
	<div class="panel-heading">
		{{ 'Content'|trans }}
	</div>
	<div class="panel-body section-content rich-text">
		{{ _self.paragraphs(section.content) }}
	</div>
</div>
<div class="panel panel-default annotations-panel" id="step-{{ step.id }}-panel-{{ panel.id }}-blockinfo-{{ blockinfo.id }}-chapter-{{ chapter.id }}-section-{{ section.id }}-annotations-panel">
	<div class="panel-heading">
		{{ 'Annotations'|trans }}
	</div>
	<div class="panel-body section-annotations rich-text">
		{{ _self.paragraphs(section.annotations) }}
	</div>
</div>
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}


{% macro showAttribute(element, type, name, label, value, required, placeholder, options) %}
{% if required or value is not empty %}
<div class="form-group col-sm-12">
	<label class="col-sm-4 control-label">{{ label }}</label>
	<div class="col-sm-8">
		{% if type == 'text' or type == 'number' %}
		<p data-attribute="{{ name }}" data-value="{{ value }}" class="form-control-static simple-value">{{ value }}</p>
		{% elseif type == 'checkbox' %}
		<p data-attribute="{{ name }}" class="form-control-static simple-value" data-value="{%- if value -%}1{%- else -%}0{%- endif -%}">{%- if value -%}{{ 'Yes'|trans }}{%- else -%}{{ 'No'|trans }}{%- endif -%}</p>
		{% elseif type == 'select' %}
			{% for val, option in options %}
			{%- if value == val %}
			<p data-attribute="{{ name }}" data-value="{{ value }}" class="form-control-static simple-value">{{ option }}</p>
			{%- endif -%}
			{% endfor %}
		{% endif %}
	</div>
</div>
{% endif %}
{% endmacro %}
 
{% macro showExpressionAttribute(element, name, label, value, plainvalue, required, placeholder) %}
{% if required or value is not empty %}
<div class="form-group col-sm-12">
	<label class="col-sm-4 control-label">{{ label }}</label>
	<span data-attribute="{{ name }}" class="attribute-expression" data-placeholder="{{ placeholder }}"  data-value="{{ value }}">{{ plainvalue }}</span>
</div>
{% endif %}
{% endmacro %}

{% macro openCollapsiblePanel(id, header, style, in, sortable, buttons) %}
<div class="panel-group" id="{{ id }}" role="tablist" aria-multiselectable="true">
	<div class="panel panel-{{ style }}">
		<div class="panel-heading" role="tab" id="{{ id }}-panel">
			{% if buttons is not empty %}
			{% for button in buttons %}
			<button class="btn btn-{{ style }} pull-right update-button {{ button.class }}" data-parent="#{{ id }}">{{ button.label }} <span class="glyphicon {{ button.icon }}"></span></button>
			{% endfor %}
			{% endif %}
			{% if style == 'primary' %}
			<button class="btn btn-{{ style }} pull-right expand-all toggle-collapse-all" data-parent="#{{ id }}">{{'Expand all'|trans }} <span class="glyphicon glyphicon-expand"></span></button>
			{% endif %}
			<h4 class="panel-title">
				<a data-toggle="collapse" data-parent="#{{ id }}" href="#collapse{{ id }}" aria-expanded="true" aria-controls="collapse{{ id }}">
					{{ header }}
				</a>
			</h4>
		</div>
		{# <div id="collapse{{ id }}" class="panel-collapse collapse {{ in }}" role="tabpanel" aria-labelledby="{{ id }}-panel"> #}
		<div id="collapse{{ id }}" class="panel-collapse collapse" role="tabpanel" aria-labelledby="{{ id }}-panel">
			<div class="panel-body {{ sortable }}">
{% endmacro %}

{% macro closeCollapsiblePanel() %}
			</div>
		</div>
	</div>
</div>
{% endmacro %}

{% macro showData(data, containerType, inClass) %}
{{ _self.openCollapsiblePanel('data-' ~ data.id, '#'~data.id~' : '~data.label, 'info', inClass, '', [{ 'class': 'delete-data', 'label': 'Delete'|trans, 'icon': 'glyphicon-minus-sign' }, { 'class': 'edit-data', 'label': 'Edit'|trans, 'icon': 'glyphicon-pencil' } ] ) }}
<div class="panel panel-default {{ containerType }}-container" id="data-{{ data.id }}-attributes-panel" data-id="{{ data.id }}">
	<div class="panel-body">
		<div class="attributes-container">
			<div>
			{{ _self.showAttribute('data-'~data.id, 'text', 'name', 'Name'|trans, data.name, true, 'Data name'|trans) }}
			{{ _self.showAttribute('data-'~data.id, 'text', 'label', 'Label'|trans, data.label, true, 'Data label'|trans) }}
			{{ _self.showAttribute('data-'~data.id, 'select', 'type', 'Type'|trans, data.type, true, 'Select a type'|trans, {'array':'liste'|trans, 'date':'date'|trans, 'day':'day'|trans, 'month':'month'|trans, 'year':'year'|trans, 'boolean':'boolean'|trans, 'integer':'integer'|trans, 'number':'number'|trans, 'text':'text'|trans, 'textarea':'textarea'|trans, 'money':'money'|trans, 'choice':'choice'|trans, 'multichoice':'multichoice'|trans, 'percent':'percent'|trans, 'table':'table'|trans, 'department':'department'|trans, 'region':'region'|trans, 'country':'country'|trans}) }}
			{{ _self.showExpressionAttribute('data-'~data.id, 'default', 'Default'|trans, data.unparsedDefault, data.plainDefault, false, 'default value'|trans) }}
			{{ _self.showExpressionAttribute('data-'~data.id, 'min', 'Min'|trans, data.unparsedMin, data.plainMin, false, 'Minimum value'|trans) }}
			{{ _self.showExpressionAttribute('data-'~data.id, 'max', 'Max'|trans, data.unparsedMax, data.plainMax, false, 'Maximum value'|trans) }}
			{{ _self.showExpressionAttribute('data-'~data.id, 'content', 'Content'|trans, data.content, data.plainContent, false, 'Content'|trans) }}
			{% if data.round != '2' %}
			{{ _self.showAttribute('data-'~data.id, 'number', 'round', 'Round'|trans, data.round, false, 'Round'|trans) }}
			{% endif %}
			{{ _self.showAttribute('data-'~data.id, 'text', 'unit', 'Unit'|trans, data.unit, false, 'Unit'|trans) }}
			{{ _self.showExpressionAttribute('data-'~data.id, 'source', 'Source'|trans, data.source, data.plainSource, false, 'Source'|trans) }}
			{{ _self.showExpressionAttribute('data-'~data.id, 'index', 'Index'|trans, data.unparsedIndex, data.plainIndex, false, 'Index'|trans) }}
			{{ _self.showAttribute('data-'~data.id, 'checkbox', 'memorize', 'Memorize'|trans, data.memorize, false, 'Memorize'|trans) }}
			</div>
		</div>
	</div>
</div>
<div class="panel panel-default description-panel" id="data-{{ data.id }}-description-panel">
	<div class="panel-heading">
		{{ 'Description'|trans }}
	</div>
	<div class="panel-body data-description rich-text">
		{{ _self.paragraphs(data.description) }}
	</div>
</div>
{% if data.choices is not empty or data.choiceSource is not empty %}
<div class="panel panel-default choices-panel" id="data-{{ data.id }}-choices-panel">
	<div class="panel-heading">
		{{ 'Choices'|trans }}
	</div>
	<div class="panel-body">
		{% for choice in data.choices %}
		<div class="panel panel-default choice-container" data-id="{{ choice.id }}">
			<div class="panel-heading">
				{{ 'Choice %id%'|trans({ '%id%' : choice.id }) }}
			</div>
			<div class="panel-body" id="data-{{ data.id }}-choice-{{ choice.id }}-panel">
				<div class="attributes-container">
					<div>
					{{ _self.showAttribute('data-'~data.id~'-choice-'~choice.id, 'text', 'value', 'Value'|trans, choice.value, true, 'Choice value'|trans) }}
					{{ _self.showAttribute('data-'~data.id~'-choice-'~choice.id, 'text', 'label', 'Label'|trans, choice.label, true, 'Choice label'|trans) }}
					</div>
				</div>
			</div>
		</div>
		{% endfor %}
		{% if data.choiceSource is not empty %}
		<div class="attributes-container choice-source-container" data-id="{{ data.choiceSource.id }}">
			<div>
			{{ _self.showAttribute('data-'~data.id~'-choicesource-'~data.choiceSource.id, 'text', 'idColumn', 'Source column id'|trans, data.choiceSource.idColumn, false, 'Source column id'|trans) }}
			{{ _self.showAttribute('data-'~data.id~'-choicesource-'~data.choiceSource.id, 'text', 'valueColumn', 'Source column value'|trans, data.choiceSource.valueColumn, true, 'Source column value'|trans) }}
			{{ _self.showAttribute('data-'~data.id~'-choicesource-'~data.choiceSource.id, 'text', 'labelColumn', 'Source column label'|trans, data.choiceSource.labelColumn, true, 'Source column label'|trans) }}
			</div>
		</div>
		{% endif %}
	</div>
</div>
{% endif %}

{{ _self.closeCollapsiblePanel() }}

{% endmacro %}

{% macro showConditions(conditions) %}
{% for condition in conditions %}
{{ _self.showCondition(condition) }}
{% endfor %}
{% endmacro %}

{% macro showCondition(condition) %}
{% if condition.all is not empty %}
	<li class="condition">{{ 'All of the following conditions are met'|trans }} : 
	<ul>
	{{ _self.showConditions(condition.all) }}
	</ul>
	</li>
{% elseif condition.any is not empty %}
	<li class="condition">{{ 'Any of the following conditions is met'|trans }} : 
	<ul>
	{{ _self.showConditions(condition.any) }}
	</ul>
	</li>
{% elseif condition.none is not empty %}
	<li class="condition">{{ 'None of the following conditions is met'|trans }} : 
	<ul>
	{{ _self.showConditions(condition.none) }}
	</ul>
	</li>
{% else %}
	<li class="condition">{{ '«' ~ condition.name ~ '» ' ~ condition.operator ~ ' ' ~ condition.value }}</li>
{% endif %}

{% endmacro %}

{% macro paragraphs(text) %}
	{% set paragraphs = text|trim|split("\n") %}
	{% if paragraphs is not empty %}
		{% if paragraphs|length == 1 %}
			{{ paragraphs[0]|raw }}
		{% else %}
			{%- for paragraph in paragraphs -%}
				<p>{%- if paragraph|trim is empty -%}&nbsp;{%- else -%}{{ paragraph|raw }}{%- endif -%}</p>
			{% endfor %}
		{% endif %}
	{% endif %}
{% endmacro %}


