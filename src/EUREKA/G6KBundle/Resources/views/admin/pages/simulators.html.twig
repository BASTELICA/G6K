{#
The MIT License (MIT)

Copyright (c) 2015 Jacques Archimède

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
#}

{% extends "EUREKAG6KBundle:admin/layout:pagelayout.html.twig" %}

{% block content %}
<h2>Simulators definition</h2>
{% if simulator is not empty %}
<button class="btn btn-warning update-button save-simulator">Save <span class="glyphicon glyphicon-save"></span></button>
{% endif %}
<div class="navbar-default navbar-side" role="navigation">
	<div class="sidebar-collapse">
		<div id="simulators" class="nav panel panel-primary">
			<div class="panel-heading"><h3>Simulators</h3></div>
			<div class="panel-body">
				<ul class="nav nav-pills nav-stacked">
					{% for simu in simulators %}
					<li><a href="{{ path('eureka_g6k_admin_simulators') }}/{{ simu.file }}">{{ simu.label }}</a></li>
					{% endfor %}
				</ul>
			</div>
		</div>
	</div>
	<div id="trigger"></div>
</div>

<div id="page-wrapper" class="content">
	<div id="page-simulators">
		<div class="row">
			<div class="col-md-12">
				{% if simulator is not empty %}
				<div class="panel-group" id="simulator" role="tablist" aria-multiselectable="true">
					<div class="panel panel-primary">
						<div class="panel-heading" role="tab">
							<button class="btn btn-primary pull-right update-button edit-simulator">Edit <span class="glyphicon glyphicon-pencil"></span></button>
							<form id="save-form" action="" method="post">
							<input type="hidden" name="simulator" value="" />
							<input type="hidden" name="datas" value="" />
							<input type="hidden" name="rules" value="" />
							<input type="hidden" name="steps" value="" />
							<input type="hidden" name="sources" value="" />
							<input type="hidden" name="update" value="true" />
							<h4 class="panel-title">Simulator : {{ simulator.label }}</h4>
							</form>
						</div>
						<div class="panel-body">
							<div class="panel panel-default" id="simulator-attributes-panel-holder">
								<div class="panel-body">
									<div class="attributes-container">
										<div>
										{{ _self.showAttribute('simulator', 'text', 'name', 'Name', simulator.name, true, 'name') }}
										{{ _self.showAttribute('simulator', 'text', 'label', 'Label', simulator.label, true, 'label') }}
										{{ _self.showAttribute('simulator', 'text', 'defaultView', 'Default view', simulator.defaultView, true, 'defaultView') }}
										{{ _self.showAttribute('simulator', 'text', 'referer', 'Main referer', simulator.referer, true, 'referer') }}
										{{ _self.showAttribute('simulator', 'select', 'dateFormat', 'Date format', simulator.dateFormat, true, 'Select a format', { 'd/m/Y':'d/m/Y', 'm/d/Y':'m/d/Y', 'd-m-Y':'d-m-Y', 'm-d-Y':'m-d-Y', 'Y-m-d':'Y-m-d' }) }}
										{{ _self.showAttribute('simulator', 'text', 'decimalPoint', 'Decimal point', simulator.decimalPoint, true, 'Decimal point') }}
										{{ _self.showAttribute('simulator', 'select', 'moneySymbol', 'Currency symbol', simulator.moneySymbol, true, 'Select a symbol', {'฿':'฿', 'B/.':'B/.', '₵':'₵', '¢':'¢', '₡':'₡', 'Kč':'Kč', '$':'$', '₫':'₫', '€':'€', 'ƒ':'ƒ', 'Ft':'Ft', '₲':'₲', '₴':'₴', '₭':'₭', 'L':'L', '£ / ₤':'£ / ₤', '₺':'₺', '₥':'₥', '₦':'₦', 'S/.':'S/.', '₱':'₱', 'P':'P', 'R':'R', 'RM':'RM', '₹ / ₨':'₹ / ₨', '৲':'৲', '৳':'৳', 'R$':'R$', '₪':'₪', '₮':'₮', '₩':'₩', '¥':'¥', 'Ұ':'Ұ', 'zł':'zł' }) }}
										{{ _self.showAttribute('simulator', 'select', 'symbolPosition', 'Symbol position', simulator.symbolPosition, true, 'Select a position', {'before':'before currency', 'after':'after currency'}) }}
										{{ _self.showAttribute('simulator', 'checkbox', 'dynamic', 'Interactive UI', simulator.dynamic, true, 'dynamic') }}
										{{ _self.showAttribute('simulator', 'checkbox', 'memo', 'Data memo ?', simulator.memo, true, 'memo') }}
										</div>
									</div>
								</div>
							</div>
							<div class="panel panel-default" id="simulator-description-panel-holder">
								<div class="panel-heading">
									Description
								</div>
								<div class="panel-body simulator-description">
									{{ _self.paragraphs(simulator.description) }}
								</div>
							</div>
							<div class="panel panel-default" id="simulator-related-informations-panel-holder">
								<div class="panel-heading">
									Related informations
								</div>
								<div class="panel-body simulator-related-informations">
									{{ _self.paragraphs(simulator.relatedInformations) }}
								</div>
							</div>
							<div class="panel panel-default" id="simulator-elements-panel">
							{{ _self.showDatas ( simulator ) }}
							{{ _self.showBusinessRules ( simulator ) }}
							{{ _self.showSteps ( simulator ) }}
							{{ _self.showSources ( simulator ) }}
							</div>
						</div>
					</div>
				</div>
				{% endif %}
			</div>
		</div>
	</div>
</div>
{% endblock %}

{% block scripts %}
{{ parent() }}<script type="text/javascript" src="{{ asset('bundles/eurekag6k/admin/js/g6k.admin.simulators.js') }}"></script>
 {% endblock %}
 
{% macro showDatas(simulator) %}
{{ _self.openCollapsiblePanel('datas' , 'Datas', 'primary', '', 'sortable', [{ 'class': 'add-data', 'label': 'Add data', 'icon': 'glyphicon-plus-sign' }, { 'class': 'add-datagroup', 'label': 'Add datagroup', 'icon': 'glyphicon-plus-sign' }] ) }}
{% for data in simulator.datas %}
	{% if data.class == "DataGroup" %}
	{{ _self.openCollapsiblePanel('datagroup-' ~ data.id , 'Group ' ~ data.label, 'success', loop.index == 1 ? 'in' : '', 'sortable', [{ 'class': 'delete-datagroup', 'label': 'Delete' , 'icon': 'glyphicon-minus-sign' }, { 'class': 'add-data', 'label': 'Add data', 'icon': 'glyphicon-plus-sign' }, { 'class': 'edit-datagroup', 'label': 'Edit datagroup', 'icon': 'glyphicon-pencil' }] ) }}
	<div class="panel panel-default data-container datagroup" id="datagroup-{{ data.id }}-attributes-panel" data-id="{{ data.id }}">
		<div class="panel-body">
			<div class="attributes-container">
				<div>
				{{ _self.showAttribute('datagroup-'~data.id, 'text', 'name', 'Group Name', data.name, true, 'Group name') }}
				{{ _self.showAttribute('datagroup-'~data.id, 'text', 'label', 'Group Label', data.label, true, 'Group label') }}
				</div>
			</div>
		</div>
	</div>
	<div class="panel panel-default description-panel" id="datagroup-{{ data.id }}-description-panel">
		<div class="panel-heading">
			Description
		</div>
		<div class="panel-body  datagroup-description">
			{{ _self.paragraphs(data.description) }}
		</div>
	</div>
	<div class="panel panel-default datas-panel" id="datagroup-{{ data.id }}-datas-panel">
		<div class="panel-body sortable">
		{% for gdata in data.datas %}
			{{ _self.showData(gdata, 'datagroup-data', loop.index == 1 ? 'in' : '') }}
		{% endfor %}
		</div>
	</div>
	{{ _self.closeCollapsiblePanel() }}  
	{% else %}
	{{ _self.showData(data, 'data', loop.index == 1 ? 'in' : '') }}
	{% endif %}
{% endfor %}
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}

{% macro showBusinessRules(simulator) %}
{{ _self.openCollapsiblePanel('businessrules' , 'Business rules', 'primary', '', 'sortable', [{ 'class': 'add-rule', 'label': 'Add', 'icon': 'glyphicon-plus-sign' }] ) }}
<div id="business-rules">
{% for rule in simulator.businessRules %}
	<div id="{{ rule.elementId }}" class="panel panel-info sortable rule-container">
		<div class="panel-heading" role="tab">
			<button class="btn btn-info pull-right update-button delete-rule" data-parent="#{{ rule.elementId }}">Delete <span class="glyphicon glyphicon-minus-sign"></span></button>
			<button class="btn btn-info pull-right update-button edit-rule" data-parent="#{{ rule.elementId }}">Edit <span class="glyphicon glyphicon-pencil"></span></button>
			<h4 class="panel-title">
				<a data-toggle="collapse" data-parent="#business-rules" href="#collapse{{ rule.elementId }}" aria-expanded="true" aria-controls="collapse{{ rule.elementId }}">#<span class="rule-id">{{ rule.id }}</span> Rule <span class="rule-name">{{ rule.name }}</span> : <span class="rule-label">{{ rule.label }}</span></a>
			</h4>
		</div>
		<div id="collapse{{ rule.elementId }}" class="panel-body panel-collapse collapse" role="tabpanel">
			<div class="panel panel-default conditions-panel">
				<div class="panel-heading"><h4>When ...</h4></div>
				<div class="panel-body">
					<ul class="rule-conditions" data-value="{{ rule.conditions }}">
					{{ _self.showCondition(rule.extendedConditions) }}
					</ul>
				</div>
			</div>
			{% if rule.ifActions is not empty %}
			<div class="panel panel-default if-actions-panel">
				<div class="panel-heading"><h4>then do ...</h4></div>
				<div class="panel-body">
					{% for action in rule.ifActions %}
					{{ _self.showRuleAction(action, simulator) }}
					{% endfor %}
				</div>
			</div>
			{% endif %}
			{% if rule.elseActions is not empty %}
			<div class="panel panel-default else-actions-panel">
				<div class="panel-heading"><h4>else do ...</h4></div>
				<div class="panel-body">
					{% for action in rule.elseActions %}
					{{ _self.showRuleAction(action, simulator) }}
					{% endfor %}
				</div>
			</div>
			{% endif %}
		</div>
	</div>
{% endfor %}
</div>
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}

{% macro showRuleAction(action, simulator) %}
<div class="rule-action" data-id="{{ action.id }}" data-name="{{ action.name }}" data-target="{{ action.target }}" data-data="{{ action.data }}" data-datagroup="{{ action.datagroup }}" data-step="{{ action.step }}" data-fieldset="{{ action.fieldset }}" data-field="{{ action.field }}" data-blockinfo="{{ action.blockinfo }}" data-chapter="{{ action.chapter }}" data-section="{{ action.section }}" data-prenote="{{ action.prenote }}" data-postnote="{{ action.postnote }}" data-action="{{ action.action }}" data-footnote="{{ action.footnote }}" data-choice="{{ action.choice }}" data-value="{{ action.value }}">
{% if action.name == 'notifyError' or action.name == 'notifyWarning' %}
	<span class="action-name">notify {{ action.name == 'notifyError' ? 'Error' : 'Warning' }} : </span> <span class="action-value">«{{ action.value }}»</span> <span class="action-target"> to {{ action.target }} </span>
	{% if action.target == 'data' %}
		<span class="action-data">«{{ simulator.getDataById(action.data).label }}»</span>
	{% elseif action.target == 'datagroup' %}
		<span class="action-datagroup">«{{ simulator.getDataGroupById(action.datagroup).label }}»</span>
	{% endif %}
{% elseif action.name == 'hideObject' or action.name == 'showObject' %}
	{% set step = simulator.getStepById(action.step) %}
	<span class="action-name">{{ action.name == 'hideObject' ? 'hide' : 'show' }}</span> <span class="action-target">{{ action.target }}</span>
	{% if action.target == 'step' %}
		<span class="action-step">«{{ step.label }}»</span>
	{% elseif action.target == 'panel' %}
		<span class="action-panel">«{{ action.panel }}»</span>
		<span class="action-step"> of step «{{ step.label }}»</span>
	{% elseif action.target == 'fieldset' %}
		<span class="action-fieldset">«{{ action.fieldset }}»</span>
		<span class="action-panel"> in panel «{{ action.panel }}»</span>
		<span class="action-step"> of step «{{ step.label }}»</span>
	{% elseif action.target == 'field' %}
		<span class="action-field">«{{ step.getFieldSetById(action.fieldset).getFieldByPosition(action.field).label }}»</span>
		<span class="action-fieldset"> in fieldset «{{ action.fieldset }}»</span>
		<span class="action-panel"> of panel «{{ action.panel }}»</span>
		<span class="action-step"> of step «{{ step.label }}»</span>
	{% elseif action.target == 'blockinfo' %}
		<span class="action-blockinfo">«{{ action.blockinfo }}»</span>
		<span class="action-panel"> in panel «{{ action.panel }}»</span>
		<span class="action-step"> of step «{{ step.label }}»</span>
	{% elseif action.target == 'chapter' %}
		<span class="action-chapter">«{{ step.getFieldSetById(action.blockinfo).getChapterById(action.chapter).label }}»</span>
		<span class="action-blockinfo"> in blockinfo «{{ action.blockinfo }}»</span>
		<span class="action-panel"> of panel «{{ action.panel }}»</span>
		<span class="action-step"> of step «{{ step.label }}»</span>
	{% elseif action.target == 'section' %}
		<span class="action-section">«{{ step.getFieldSetById(action.blockinfo).getChapterById(action.chapter).getSectionById(action.section).label }}»</span>
		<span class="action-chapter"> in «{{ step.getFieldSetById(action.blockinfo).getChapterById(action.chapter).label }}»</span>
		<span class="action-blockinfo"> of blockinfo «{{ action.blockinfo }}»</span>
		<span class="action-panel"> of panel «{{ action.panel }}»</span>
		<span class="action-step"> of step «{{ step.label }}»</span>
	{% elseif action.target == 'prenote' %}
		<span class="action-prenote"> of field «{{ step.getFieldSetById(action.fieldset).getFieldByPosition(action.prenote).label }}»</span>
		<span class="action-fieldset"> in fieldset «{{ action.fieldset }}»</span>
		<span class="action-panel"> of panel «{{ action.panel }}»</span>
		<span class="action-step"> of step «{{ step.label }}»</span>
	{% elseif action.target == 'postnote' %}
		<span class="action-postnote"> of field «{{ step.getFieldSetById(action.fieldset).getFieldByPosition(action.postnote).label }}»</span>
		<span class="action-fieldset"> in «{{ action.fieldset }}»</span>
		<span class="action-panel"> of panel «{{ action.panel }}»</span>
		<span class="action-step"> of step «{{ step.label }}»</span>
	{% elseif action.target == 'footnote' %}
		<span class="action-footnote">«{{ action.footnote }}»</span>
		<span class="action-panel"> in panel «{{ action.panel }}»</span>
		<span class="action-step"> of step «{{ step.label }}»</span>
	{% elseif action.target == 'action' %}
		<span class="action-action">«{{ action.action }}»</span>
		<span class="action-panel"> in panel «{{ action.panel }}»</span>
		<span class="action-step"> of step «{{ step.label }}»</span>
	{% elseif action.target == 'choice' %}
		<span class="action-choice">«{{ action.choice }}»</span>
		<span class="action-data"> of data «{{ simulator.replaceByDataLabel(action.data).label }}»</span>
	{% endif %}
{% elseif action.name == 'setAttribute' %}
	<span class="action-name">set</span> <span class="action-target">{{ action.target }}</span> <span class="action-data"> of «{{ simulator.getDataById(action.data).label }}»</span> <span class="action-value"> to {{ simulator.replaceByDataLabel(action.value) }}</span>
{% endif %}
</div>
{% endmacro %}

{% macro showSteps(simulator) %}
{{ _self.openCollapsiblePanel('steps' , 'Steps', 'primary', '', 'sortable', [{ 'class': 'add-step', 'label': 'Add', 'icon': 'glyphicon-plus-sign' }] ) }}
{% for step in simulator.steps %}
	{{ _self.openCollapsiblePanel('step-' ~ step.id , step.label, 'info', loop.index == 1 ? 'in' : '', 'sortable' ) }}
	<div class="panel panel-default step-container" id="step-{{ step.id }}-attributes-panel" data-id="{{ step.id }}">
		<div class="panel-body">
			<div class="attributes-container">
				<div>
				{{ _self.showAttribute('step-'~step.id, 'text', 'name', 'Step Name', step.name, true, 'Step name') }}
				{{ _self.showAttribute('step-'~step.id, 'text', 'label', 'Step Label', step.label, true, 'Step label') }}
				{{ _self.showAttribute('step-'~step.id, 'text', 'template', 'Step Template', step.template, true, 'Step label') }}
				{{ _self.showAttribute('step-'~step.id, 'select', 'output', 'Output', step.output, false, 'Select an output', {'normal':'Normal', 'inlinePDF':'Inline PDF', 'downloadablePDF':'Downloadable PDF', 'html':'html'}) }}
				{{ _self.showAttribute('step-'~step.id, 'checkbox', 'dynamic', 'Interactive UI', step.dynamic, false, 'dynamic') }}
				</div>
			</div>
		</div>
	</div>
	<div class="panel panel-default description-panel" id="step-{{ step.id }}-description-panel">
		<div class="panel-heading">
			Description
		</div>
		<div class="panel-body step-description">
			{{ _self.paragraphs(step.description) }}
		</div>
	</div>
	<div class="panel panel-default" id="step-{{ step.id }}-fieldsets-panel">
		<div class="panel-body">
		{% for blck in step.fieldSets %}
			{% if blck.class == "FieldSet" %}
			{{ _self.showFieldSet(step, blck, loop.index == 1 ? 'in' : '') }}
			{% elseif blck.class == 'BlockInfo' %}
			{{ _self.showBlockInfo(step, blck, loop.index == 1 ? 'in' : '') }}
			{% endif %}
		{% endfor %}
		</div>
	</div>
	{{ _self.closeCollapsiblePanel() }}  
{% endfor %}
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}

{% macro showSources(simulator) %}
{{ _self.openCollapsiblePanel('sources' , 'Sources', 'primary', '', 'sortable', [{ 'class': 'add-source', 'label': 'Add', 'icon': 'glyphicon-plus-sign' }] ) }}
Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably havent heard of them accusamus labore sustainable VHS.
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}

{% macro showFieldSet(step, fieldset, inClass) %}
{{ _self.openCollapsiblePanel('step-' ~ step.id ~ '-fieldset-' ~ fieldset.id , 'Fieldset #' ~ fieldset.id, 'info', inClass, '' ) }}
<div class="panel panel-default fielset-container" id="step-{{ step.id }}-fieldset-{{ fieldset.id }}-attributes-panel" data-id="{{ fieldset.id }}">
	<div class="panel-body">
		<div class="attributes-container">
			<div>
			{{ _self.showAttribute('step-' ~ step.id ~ '-fieldset-' ~ fieldset.id, 'select', 'disposition', 'Disposition', fieldset.disposition, false, 'Select a Disposition', {'classic':'Classic', 'grid':'Grid'}) }}
			</div>
		</div>
	</div>
</div>
<div class="panel panel-default" id="step-{{ step.id }}-fieldset-{{ fieldset.id }}-legend-panel">
	<div class="panel-heading">
		Legend
	</div>
	<div class="panel-body fieldset-legend">
		{{ _self.paragraphs(fieldset.legend) }}
	</div>
</div>
<div class="panel panel-default" id="step-{{ step.id }}-fieldset-{{ fieldset.id }}-fieldsets-panel">
	<div class="panel-body">
	{% for column in fieldset.columns %}
	{#	{{ _self.showFieldSetColumn(step, fieldset, column, loop.index == 1 ? 'in' : '') }} #}
	{% endfor %}
	</div>
	{% for field in fieldset.fields %}
	{{ _self.showField(step, fieldset, field, loop.index == 1 ? 'in' : '') }}
	{% endfor %}
</div>
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}

{% macro showField(step, fieldset, field, inClass) %}
{{ _self.openCollapsiblePanel('step-' ~ step.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position , 'Field #' ~ field.position ~ ' ' ~ field.label, 'info', inClass, '' ) }}
<div class="panel panel-default field-container" id="step-{{ step.id }}-fieldset-{{ fieldset.id }}-field-{{ field.position }}-attributes-panel" data-id="{{ field.position }}">
	<div class="panel-body">
		<div class="attributes-container">
			<div>
			{{ _self.showAttribute('step-' ~ step.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'text', 'data', 'Data', field.fieldset.step.simulator.getDataById(field.data).label, true, 'Field data') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'text', 'label', 'Label', field.label, false, 'Field label') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'select', 'usage', 'Usage', field.usage, true, 'Select an usage', {'input':'input', 'output':'output'}) }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'text', 'prompt', 'Prompt', field.prompt, false, 'Field prompt') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'checkbox', 'required', 'Required', field.required, false, 'required') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'checkbox', 'visibleRequired', 'Required if visible', field.visibleRequired, false, 'visibleRequired') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'checkbox', 'newline', 'Newline before field ?', field.newline, false, 'newline') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'checkbox', 'colon', 'Show colon after field label ?', field.colon, false, 'colon') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'checkbox', 'underlabel', 'Place the field under the label ?', field.underlabel, false, 'underlabel') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'checkbox', 'help', 'Show data description as help ?', field.help, false, 'help') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'checkbox', 'emphasize', 'Emphasize the text label ?', field.emphasize, false, 'emphasize') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'checkbox', 'expanded', 'Show choices as radio buttons ?', field.expanded, false, 'expanded') }}
			{{ _self.showExpressionAttribute('step-' ~ step.id ~ '-fieldset-' ~ fieldset.id ~ '-field-' ~ field.position, 'explanation', 'Explanation', field.explanation, field.explanation, false, 'Explanation') }}
			</div>
		</div>
	</div>
</div>
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}

{% macro showBlockInfo(step, blockinfo, inClass) %}
{{ _self.openCollapsiblePanel('step-' ~ step.id ~ '-blockinfo-' ~ blockinfo.id , 'Blockinfo #' ~ blockinfo.id, 'info', inClass, '' ) }}
<div class="panel panel-default blockinfo-container" id="step-{{ step.id }}-blockinfo-{{ blockinfo.id }}-attributes-panel" data-id="{{ blockinfo.id }}">
	<div class="panel-body">
		<div class="attributes-container">
			<div>
			{{ _self.showAttribute('step-' ~ step.id ~ '-blockinfo-' ~ blockinfo.id, 'text', 'name', 'Name', blockinfo.name, true, 'Blockinfo name') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-blockinfo-' ~ blockinfo.id, 'text', 'label', 'Label', blockinfo.label, true, 'Blockinfo label') }}
			</div>
		</div>
	</div>
</div>
<div class="panel panel-default" id="step-{{ step.id }}-blockinfo-{{ blockinfo.id }}-chapters-panel">
	{% for chapter in blockinfo.chapters %}
	{{ _self.showChapter(step, blockinfo, chapter, loop.index == 1 ? 'in' : '') }}
	{% endfor %}
</div>
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}

{% macro showChapter(step, blockinfo, chapter, inClass) %}
{{ _self.openCollapsiblePanel('step-' ~ step.id ~ '-blockinfo-' ~ blockinfo.id ~ '-chapter-' ~ chapter.id , 'Chapter #' ~ chapter.id ~ ' ' ~ chapter.label, 'info', inClass, '' ) }}
<div class="panel panel-default chapter-container" id="step-{{ step.id }}-blockinfo-{{ blockinfo.id }}-chapter-{{ chapter.id }}-attributes-panel" data-chapter-id="{{ chapter.id }}">
	<div class="panel-body">
		<div class="attributes-container">
			<div>
			{{ _self.showAttribute('step-' ~ step.id ~ '-blockinfo-' ~ blockinfo.id ~ '-chapter-' ~ chapter.id, 'text', 'name', 'Name', chapter.name, true, 'Chapter name') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-blockinfo-' ~ blockinfo.id ~ '-chapter-' ~ chapter.id, 'text', 'label', 'Label', chapter.label, true, 'Chapter label') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-blockinfo-' ~ blockinfo.id ~ '-chapter-' ~ chapter.id, 'text', 'icon', 'Icon', chapter.icon, false, 'Chapter icon') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-blockinfo-' ~ blockinfo.id ~ '-chapter-' ~ chapter.id, 'checkbox', 'collapsible', 'Allow collapse/expand ?', chapter.collapsible, false, 'collapsible') }}
			</div>
		</div>
	</div>
</div>
<div class="panel panel-default" id="step-{{ step.id }}-blockinfo-{{ blockinfo.id }}-chapter-{{ chapter.id }}-sections-panel">
	{% for section in chapter.sections %}
	{{ _self.showSection(step, blockinfo, chapter, section, loop.index == 1 ? 'in' : '') }}
	{% endfor %}
</div>
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}


{% macro showSection(step, blockinfo, chapter, section, inClass) %}
{{ _self.openCollapsiblePanel('step-' ~ step.id ~ '-blockinfo-' ~ blockinfo.id ~ '-chapter-' ~ chapter.id ~ '-section-' ~ section.id , 'Section #' ~ section.id ~ ' ' ~ section.label, 'info', inClass, '' ) }}
<div class="panel panel-default section-container" id="step-{{ step.id }}-blockinfo-{{ blockinfo.id }}-chapter-{{ chapter.id }}-section-{{ section.id }}-attributes-panel" data-section-id="{{ section.id }}">
	<div class="panel-body">
		<div class="attributes-container">
			<div>
			{{ _self.showAttribute('step-' ~ step.id ~ '-blockinfo-' ~ blockinfo.id ~ '-chapter-' ~ chapter.id ~ '-section-' ~ section.id, 'text', 'name', 'Name', section.name, true, 'Section name') }}
			{{ _self.showAttribute('step-' ~ step.id ~ '-blockinfo-' ~ blockinfo.id ~ '-chapter-' ~ chapter.id ~ '-section-' ~ section.id, 'text', 'label', 'Label', section.label, false, 'Section label') }}
			</div>
		</div>
	</div>
</div>
<div class="panel panel-default" id="step-{{ step.id }}-blockinfo-{{ blockinfo.id }}-chapter-{{ chapter.id }}-section-{{ section.id }}-content-panel">
	<div class="panel-heading">
		Content
	</div>
	<div class="panel-body section-content">
		{{ _self.paragraphs(section.content) }}
	</div>
</div>
{{ _self.closeCollapsiblePanel() }}  
{% endmacro %}


{% macro showAttribute(element, type, name, label, value, required, placeholder, options) %}
{% if required or value is not empty %}
<div class="form-group col-sm-12">
	<label class="col-sm-2 control-label">{{ label }}</label>
	<div class="col-sm-10">
		{% if type == 'text' or type == 'number' %}
		<p data-attribute="{{ name }}" data-value="{{ value }}" class="form-control-static simple-value">{{ value }}</p>
		{% elseif type == 'checkbox' %}
		<p data-attribute="{{ name }}" class="form-control-static simple-value" data-value="{%- if value -%}1{%- else -%}0{%- endif -%}">{%- if value -%}Yes{%- else -%}No{%- endif -%}</p>
		{% elseif type == 'select' %}
			{% for val, option in options %}
			{%- if value == val %}
			<p data-attribute="{{ name }}" data-value="{{ value }}" class="form-control-static simple-value">{{ option }}</p>
			{%- endif -%}
			{% endfor %}
		{% endif %}
	</div>
</div>
{% endif %}
{% endmacro %}
 
{% macro showExpressionAttribute(element, name, label, value, plainvalue, required, placeholder) %}
{% if required or value is not empty %}
<div class="form-group col-sm-12">
	<label class="col-sm-2 control-label">{{ label }}</label>
	<span data-attribute="{{ name }}" class="attribute-expression" data-placeholder="{{ placeholder }}"  data-value="{{ value }}">{{ plainvalue }}</span>
</div>
{% endif %}
{% endmacro %}

{% macro openCollapsiblePanel(id, header, style, in, sortable, buttons) %}
<div class="panel-group" id="{{ id }}" role="tablist" aria-multiselectable="true">
	<div class="panel panel-{{ style }}">
		<div class="panel-heading" role="tab" id="{{ id }}-panel">
			{% if buttons is not empty %}
			{% for button in buttons %}
			<button class="btn btn-{{ style }} pull-right update-button {{ button.class }}" data-parent="#{{ id }}">{{ button.label }} <span class="glyphicon {{ button.icon }}"></span></button>
			{% endfor %}
			{% endif %}
			{% if style == 'primary' %}
			<button class="btn btn-{{ style }} pull-right expand-all toggle-collapse-all" data-parent="#{{ id }}">Expand all <span class="glyphicon glyphicon-expand"></span></button>
			{% endif %}
			<h4 class="panel-title">
				<a data-toggle="collapse" data-parent="#{{ id }}" href="#collapse{{ id }}" aria-expanded="true" aria-controls="collapse{{ id }}">
					{{ header }}
				</a>
			</h4>
		</div>
		<div id="collapse{{ id }}" class="panel-collapse collapse {{ in }}" role="tabpanel" aria-labelledby="{{ id }}-panel">
			<div class="panel-body {{ sortable }}">
{% endmacro %}

{% macro closeCollapsiblePanel() %}
			</div>
		</div>
	</div>
</div>
{% endmacro %}

{% macro showData(data, containerType, inClass) %}
{{ _self.openCollapsiblePanel('data-' ~ data.id , '#'~data.id~' : '~data.label, 'info', inClass, '', [{ 'class': 'delete-data', 'label': 'Delete', 'icon': 'glyphicon-minus-sign' }, { 'class': 'edit-data', 'label': 'Edit', 'icon': 'glyphicon-pencil' } ] ) }}
<div class="panel panel-default {{ containerType }}-container" id="data-{{ data.id }}-attributes-panel" data-id="{{ data.id }}">
	<div class="panel-body">
		<div class="attributes-container">
			<div>
			{{ _self.showAttribute('data-'~data.id, 'text', 'name', 'Name', data.name, true, 'Data name') }}
			{{ _self.showAttribute('data-'~data.id, 'text', 'label', 'Label', data.label, true, 'Data label') }}
			{{ _self.showAttribute('data-'~data.id, 'select', 'type', 'Type', data.type, true, 'Select a type', {'date':'date', 'day':'day', 'month':'month', 'year':'year', 'boolean':'boolean', 'integer':'integer', 'number':'number', 'text':'text', 'textarea':'textarea', 'money':'money', 'choice':'choice', 'multichoice':'multichoice', 'percent':'percent', 'table':'table', 'department':'department', 'region':'region', 'country':'country'}) }}
			{{ _self.showExpressionAttribute('data-'~data.id, 'default', 'Default', data.unparsedDefault, data.plainDefault, false, 'default value') }}
			{{ _self.showExpressionAttribute('data-'~data.id, 'min', 'Min', data.unparsedMin, data.plainMin, false, 'Minimum value') }}
			{{ _self.showExpressionAttribute('data-'~data.id, 'max', 'Max', data.unparsedMax, data.plainMax, false, 'Maximum value') }}
			{{ _self.showExpressionAttribute('data-'~data.id, 'content', 'Content', data.content, data.plainContent, false, 'Content') }}
			{% if data.round != '2' %}
			{{ _self.showAttribute('data-'~data.id, 'number', 'round', 'Round', data.round, false, 'Round') }}
			{% endif %}
			{{ _self.showAttribute('data-'~data.id, 'text', 'unit', 'Unit', data.unit, false, 'Unit') }}
			{{ _self.showExpressionAttribute('data-'~data.id, 'source', 'Source', data.source, data.plainSource, false, 'Source') }}
			{{ _self.showExpressionAttribute('data-'~data.id, 'index', 'Index', data.unparsedIndex, data.plainIndex, false, 'Index') }}
			{{ _self.showAttribute('data-'~data.id, 'checkbox', 'memorize', 'Memorize', data.memorize, false, 'Memorize') }}
			</div>
		</div>
	</div>
</div>
<div class="panel panel-default description-panel" id="data-{{ data.id }}-description-panel">
	<div class="panel-heading">
		Description
	</div>
	<div class="panel-body data-description">
		{{ _self.paragraphs(data.description) }}
	</div>
</div>
{% if data.choices is not empty or data.choiceSource is not empty %}
<div class="panel panel-default choices-panel" id="data-{{ data.id }}-choices-panel">
	<div class="panel-heading">
		Choices
	</div>
	<div class="panel-body">
		{% for choice in data.choices %}
		<div class="panel panel-default choice-container" data-id="{{ choice.id }}">
			<div class="panel-heading">
				Choice {{ choice.id }}
			</div>
			<div class="panel-body" id="data-{{ data.id }}-choice-{{ choice.id }}-panel">
				<div class="attributes-container">
					<div>
					{{ _self.showAttribute('data-'~data.id~'-choice-'~choice.id, 'text', 'value', 'Value', choice.value, true, 'Choice value') }}
					{{ _self.showAttribute('data-'~data.id~'-choice-'~choice.id, 'text', 'label', 'Label', choice.label, true, 'Choice label') }}
					</div>
				</div>
			</div>
		</div>
		{% endfor %}
		{% if data.choiceSource is not empty %}
		<div class="attributes-container choice-source-container" data-id="{{ data.choiceSource.id }}">
			<div>
			{{ _self.showAttribute('data-'~data.id~'-choicesource-'~data.choiceSource.id, 'text', 'idColumn', 'Source column id', data.choiceSource.idColumn, false, 'Source column id') }}
			{{ _self.showAttribute('data-'~data.id~'-choicesource-'~data.choiceSource.id, 'text', 'valueColumn', 'Source column value', data.choiceSource.valueColumn, true, 'Source column value') }}
			{{ _self.showAttribute('data-'~data.id~'-choicesource-'~data.choiceSource.id, 'text', 'labelColumn', 'Source column label', data.choiceSource.labelColumn, true, 'Source column label') }}
			</div>
		</div>
		{% endif %}
	</div>
</div>
{% endif %}

{{ _self.closeCollapsiblePanel() }}

{% endmacro %}

{% macro showConditions(conditions) %}
{% for condition in conditions %}
{{ _self.showCondition(condition) }}
{% endfor %}
{% endmacro %}

{% macro showCondition(condition) %}
{% if condition.all is not empty %}
	<li class="condition">All of the following conditions are met : 
	<ul>
	{{ _self.showConditions(condition.all) }}
	</ul>
	</li>
{% elseif condition.any is not empty %}
	<li class="condition">Any of the following conditions is met : 
	<ul>
	{{ _self.showConditions(condition.any) }}
	</ul>
	</li>
{% elseif condition.none is not empty %}
	<li class="condition">None of the following conditions is met : 
	<ul>
	{{ _self.showConditions(condition.none) }}
	</ul>
	</li>
{% else %}
	<li class="condition">{{ '«' ~ condition.name ~ '» ' ~ condition.operator ~ ' ' ~ condition.value }}</li>
{% endif %}

{% endmacro %}

{% macro paragraphs(text) %}
	{% set paragraphs = text|trim|split("\n") %}
	{% if paragraphs is not empty %}
		{% if paragraphs|length == 1 %}
			{{ paragraphs[0]|raw }}
		{% else %}
			{%- for paragraph in paragraphs -%}
				<p>{%- if paragraph|trim is empty -%}&nbsp;{%- else -%}{{ paragraph|raw }}{%- endif -%}</p>
			{% endfor %}
		{% endif %}
	{% endif %}
{% endmacro %}


